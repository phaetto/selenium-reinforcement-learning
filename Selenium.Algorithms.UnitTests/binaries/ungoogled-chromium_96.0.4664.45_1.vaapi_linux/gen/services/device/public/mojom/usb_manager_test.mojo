// services/device/public/mojom/usb_manager_test.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../mojo/public/js/bindings.js';

import {
  Url as url_mojom_Url,
  UrlSpec as url_mojom_UrlSpec
} from '../../../../url/mojom/url.mojom.m.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class UsbDeviceManagerTestPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'device.mojom.UsbDeviceManagerTest', scope);
  }
}

/** @interface */
export class UsbDeviceManagerTestInterface {
  
  /**
   * @param { !string } name
   * @param { !string } serialNumber
   * @param { !string } landingPage
   * @return {!Promise<{
        success: !boolean,
        message: !string,
   *  }>}
   */

  addDeviceForTesting(name, serialNumber, landingPage) {}
  
  /**
   * @param { !string } guid
   * @return {!Promise}
   */

  removeDeviceForTesting(guid) {}
  
  /**
   * @return {!Promise<{
        devices: !Array<!TestDeviceInfo>,
   *  }>}
   */

  getTestDevices() {}
}

/**
 * @implements { UsbDeviceManagerTestInterface }
 */
export class UsbDeviceManagerTestRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!UsbDeviceManagerTestPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          UsbDeviceManagerTestPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!UsbDeviceManagerTestPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !string } name
   * @param { !string } serialNumber
   * @param { !string } landingPage
   * @return {!Promise<{
        success: !boolean,
        message: !string,
   *  }>}
   */

  addDeviceForTesting(
      name,
      serialNumber,
      landingPage) {
    return this.proxy.sendMessage(
        1393794190,
        UsbDeviceManagerTest_AddDeviceForTesting_ParamsSpec.$,
        UsbDeviceManagerTest_AddDeviceForTesting_ResponseParamsSpec.$,
        [
          name,
          serialNumber,
          landingPage
        ]);
  }

  
  /**
   * @param { !string } guid
   * @return {!Promise}
   */

  removeDeviceForTesting(
      guid) {
    return this.proxy.sendMessage(
        508795205,
        UsbDeviceManagerTest_RemoveDeviceForTesting_ParamsSpec.$,
        UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParamsSpec.$,
        [
          guid
        ]);
  }

  
  /**
   * @return {!Promise<{
        devices: !Array<!TestDeviceInfo>,
   *  }>}
   */

  getTestDevices() {
    return this.proxy.sendMessage(
        928100638,
        UsbDeviceManagerTest_GetTestDevices_ParamsSpec.$,
        UsbDeviceManagerTest_GetTestDevices_ResponseParamsSpec.$,
        [
        ]);
  }
}

/**
 * An object which receives request messages for the UsbDeviceManagerTest
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class UsbDeviceManagerTestReceiver {
  /**
   * @param {!UsbDeviceManagerTestInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!UsbDeviceManagerTestRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        UsbDeviceManagerTestRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!UsbDeviceManagerTestRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        1393794190,
        UsbDeviceManagerTest_AddDeviceForTesting_ParamsSpec.$,
        UsbDeviceManagerTest_AddDeviceForTesting_ResponseParamsSpec.$,
        impl.addDeviceForTesting.bind(impl));
    this.helper_internal_.registerHandler(
        508795205,
        UsbDeviceManagerTest_RemoveDeviceForTesting_ParamsSpec.$,
        UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParamsSpec.$,
        impl.removeDeviceForTesting.bind(impl));
    this.helper_internal_.registerHandler(
        928100638,
        UsbDeviceManagerTest_GetTestDevices_ParamsSpec.$,
        UsbDeviceManagerTest_GetTestDevices_ResponseParamsSpec.$,
        impl.getTestDevices.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class UsbDeviceManagerTest {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "device.mojom.UsbDeviceManagerTest";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!UsbDeviceManagerTestRemote}
   */
  static getRemote() {
    let remote = new UsbDeviceManagerTestRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the UsbDeviceManagerTest
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class UsbDeviceManagerTestCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      UsbDeviceManagerTestRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!UsbDeviceManagerTestRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.addDeviceForTesting =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1393794190,
        UsbDeviceManagerTest_AddDeviceForTesting_ParamsSpec.$,
        UsbDeviceManagerTest_AddDeviceForTesting_ResponseParamsSpec.$,
        this.addDeviceForTesting.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.removeDeviceForTesting =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        508795205,
        UsbDeviceManagerTest_RemoveDeviceForTesting_ParamsSpec.$,
        UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParamsSpec.$,
        this.removeDeviceForTesting.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getTestDevices =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        928100638,
        UsbDeviceManagerTest_GetTestDevices_ParamsSpec.$,
        UsbDeviceManagerTest_GetTestDevices_ResponseParamsSpec.$,
        this.getTestDevices.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const TestDeviceInfoSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const UsbDeviceManagerTest_AddDeviceForTesting_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const UsbDeviceManagerTest_AddDeviceForTesting_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const UsbDeviceManagerTest_RemoveDeviceForTesting_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const UsbDeviceManagerTest_GetTestDevices_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const UsbDeviceManagerTest_GetTestDevices_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    TestDeviceInfoSpec.$,
    'TestDeviceInfo',
    [
      mojo.internal.StructField(
        'guid', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'name', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'serialNumber', 16,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'landingPage', 24,
        0,
        url_mojom_UrlSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 40],]);



/**
 * @record
 */
export class TestDeviceInfo {
  constructor() {
    /** @type { !string } */
    this.guid;
    /** @type { !string } */
    this.name;
    /** @type { !string } */
    this.serialNumber;
    /** @type { !url_mojom_Url } */
    this.landingPage;
  }
}



mojo.internal.Struct(
    UsbDeviceManagerTest_AddDeviceForTesting_ParamsSpec.$,
    'UsbDeviceManagerTest_AddDeviceForTesting_Params',
    [
      mojo.internal.StructField(
        'name', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'serialNumber', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'landingPage', 16,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class UsbDeviceManagerTest_AddDeviceForTesting_Params {
  constructor() {
    /** @type { !string } */
    this.name;
    /** @type { !string } */
    this.serialNumber;
    /** @type { !string } */
    this.landingPage;
  }
}



mojo.internal.Struct(
    UsbDeviceManagerTest_AddDeviceForTesting_ResponseParamsSpec.$,
    'UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams',
    [
      mojo.internal.StructField(
        'success', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'message', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams {
  constructor() {
    /** @type { !boolean } */
    this.success;
    /** @type { !string } */
    this.message;
  }
}



mojo.internal.Struct(
    UsbDeviceManagerTest_RemoveDeviceForTesting_ParamsSpec.$,
    'UsbDeviceManagerTest_RemoveDeviceForTesting_Params',
    [
      mojo.internal.StructField(
        'guid', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class UsbDeviceManagerTest_RemoveDeviceForTesting_Params {
  constructor() {
    /** @type { !string } */
    this.guid;
  }
}



mojo.internal.Struct(
    UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParamsSpec.$,
    'UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams {
  constructor() {
  }
}



mojo.internal.Struct(
    UsbDeviceManagerTest_GetTestDevices_ParamsSpec.$,
    'UsbDeviceManagerTest_GetTestDevices_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class UsbDeviceManagerTest_GetTestDevices_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    UsbDeviceManagerTest_GetTestDevices_ResponseParamsSpec.$,
    'UsbDeviceManagerTest_GetTestDevices_ResponseParams',
    [
      mojo.internal.StructField(
        'devices', 0,
        0,
        mojo.internal.Array(TestDeviceInfoSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class UsbDeviceManagerTest_GetTestDevices_ResponseParams {
  constructor() {
    /** @type { !Array<!TestDeviceInfo> } */
    this.devices;
  }
}

